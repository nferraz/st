#!/usr/bin/perl -T

use strict;
use warnings;
use bignum;

use Getopt::Long;
use Pod::Usage;

my %opt;
GetOptions(
  \%opt,
  'N|n|count',
  'max',
  'mean|avg|m',
  'median',
  'min',
  'mode',
  'percentile|p=i',
  'quantile|q=i',
  'sd|stdev',
  'sum|s',
  'summary',
  'var|variance',
  'delimiter|d=s',
  'format|fmt|f=s',
  'help|h',
) or pod2usage(1);

pod2usage(1) if $opt{help};

my ($min,$max);
my ($n, $sum, $sum_square, $mean) = (0, 0, 0, 0);
my (%count, $most_common);
$sum = $sum_square = 0;

# some functions require the full set
my @data;
my $keep_data = (
       defined $opt{median}
    || defined $opt{percentile}
    || defined $opt{quantile}
    || defined $opt{summary}
);

# some functions require frequencies
my $keep_frequencies = (
      defined $opt{mode}
);

my $M2 = 0;

# read data
while (<>) {
  my ($num) = /([-.0-9]+)/;
  next unless defined $num;

  if ($num !~ m{^
    [+-]?
    (?: \. ? [0-9]+
      | [0-9]+ \. [0-9]*
      | \. ? [0-9]+ E [+-]? [0-9]+
      | [0-9]* \. [0-9]+ E [+-]? [0-9]+
    )
  $}x) {
      warn "Invalid number format: '$num'\n";
      next;
  }

  $n++;

  my $delta = $num - $mean;

  $mean += $delta / $n;
  $M2   += $delta * ($num - $mean);

  if ($keep_data) {
    push @data, $num;
  }

  if ($keep_frequencies) {
    $count{$num}++;
    $most_common = $count{$num} if (!defined $most_common or $count{$num} > $most_common);
  }

  $min = $num if (!defined $min or $num < $min);
  $max = $num if (!defined $max or $num > $max);

  $sum += $num;
}

# silently exit if $n == 0
exit if (!$n);

my ( %summary, $percentile, $quantile, $median );
if ( defined $opt{summary} ) {
  my ($q1, $q2, $q3) = percentiles(\@data, 25, 50, 75);
  %summary = (
    min    => $min,
    q1     => $q1,
    median => $q2,
    q3     => $q3,
    max    => $max,
  );
} elsif (defined $opt{percentile}) {
  ($percentile) = percentiles( \@data, $opt{percentile} );
} elsif (defined $opt{quantile}) {
  ($quantile)   = percentiles( \@data, $opt{quantile} * 25 );
} elsif (defined $opt{median}) {
  ($median)     = percentiles( \@data, 50 );
}

my $variance = $n > 1 ? $M2 / ($n - 1)             : undef;
my $sd       = defined $variance ? sqrt($variance) : undef;

my @mode = grep { $count{$_} == $most_common } keys %count;

my $mode = scalar @mode == 1 ? $mode[0] : undef; # don't deal with multimodes

my %st = (
  N          => $n,
  max        => $max,
  mean       => $mean,
  median     => $median,
  min        => $min,
  mode       => $mode,
  percentile => $percentile,
  quantile   => $quantile,
  sd         => $sd,
  sum        => $sum,
  variance   => $variance,
  %summary,
);

my $delimiter = delete $opt{delimiter} || "\t";
my $format    = delete $opt{format}    || '%.2f';

my $summary   = delete $opt{summary};

my @opt = %opt      ? sort keys %opt
        : $summary  ? qw/ min q1 median q3 max /
                    : qw/ N min max sum mean sd /;

@opt = grep { defined $st{$_} } @opt;

if (scalar @opt == 1) {
  print "$st{$opt[0]}\n";
  exit;
}

print join($delimiter, @opt), "\n";
print join($delimiter, map { sprintf ($format, $st{$_}) } @opt), "\n";
exit;

###

sub percentiles {
  my ($data, @p) = @_;

  my @data = sort { $a <=> $b } @{$data};

  my @percentiles = ();
  for my $p (@p) {

    if ($p < 0 or $p > 100) {
      die "Invalid percentile ($p)\n";
    }

    my $index = $p * $#data / 100;

    my $percentile = $index == int($index) ? $data[$index]
                                           : ($data[$index] + $data[$index+1]) / 2;
  
    push @percentiles, $percentile;
  }

  return @percentiles;
}

__END__

=head1 NAME

simple statistics from the command line interface (CLI)

=head1 USAGE

  st [options] <input_file>

=head1 DESCRIPTION

"st" is a command-line tool to perform simple statistical calculations.

=head1 OPTIONS

The following options are available:

  --n|N|count
  --max
  --mean|avg|m
  --median
  --min
  --mode
  --sd|stdev
  --sum|s
  --var|variance

  --percentile|p  # 0..100
  --quantile|q    # 0..4

  --summary

If no options are used, C<st> will print:

  n min max sum mean sd

The C<--summary> option will print the five-number summary:

  min q1 median q3 max

(NOTE: calculating median and quantiles requires that we hold and
sort the entire set in memory.)

Finally, you can specify output format with:

  --delimiter|d=<value>   # default: "\t"
  --format|fmt|f=<value>  # default: "%.2f"

=head1 AUTHOR

Nelson Ferraz L<<nferraz@gmail.com>>

=head1 CONTRIBUTORS

imurray, who suggested a different algorithm for calculating variance.

asgeirn, who helped to filter input to extract numeric information,
and remove some Perl warnings.

=head1 COPYRIGHT

Copyright (c) 2013 Nelson Ferraz.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
